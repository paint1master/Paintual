using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Engine.Calc
{
    public class Vector
    {
        public Vector(double x, double y)
        {
            X = x;
            Y = y;
        }

        public Vector(Vector v) : this(v.X, v.Y)
        {

        }

        public double Magnitude()
        {
            return System.Math.Sqrt(X * X + Y * Y);
        }

        public double MagnitudeSquared()
        {
            return (X * X + Y * Y);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="length"></param>
        /// <remarks>the following is not Processing.org implementation</remarks>
        public void SetMagnitude(double length)
        {
            double m = Magnitude();

            if (m == 0)
            {
                return;
            }

            X = X * length / m;
            Y = Y * length / m;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>A Processing.org implementation</remarks>
        public void Normalize()
        {
            double norm = System.Math.Sqrt(X * X + Y * Y);

            if (norm == 0)
            {
                return;
            }

            double invNorm = 1.0d / norm;

            X *= invNorm;
            Y *= invNorm;
            return;
        }

        public override bool Equals(object obj)
        {
            var vector = obj as Vector;
            return vector != null &&
                   X == vector.X &&
                   Y == vector.Y;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        /// <remarks>Auto generated by VS2017</remarks>
        public override int GetHashCode()
        {
            var hashCode = 1861411795;
            hashCode = hashCode * -1521134295 + X.GetHashCode();
            hashCode = hashCode * -1521134295 + Y.GetHashCode();
            return hashCode;
        }

        public double X { get; set; }
        public double Y { get; set; }

        public static bool operator ==(Vector v1, Vector v2)
        {
            return (v1.X == v2.X && v1.Y == v2.Y);
        }

        public static bool operator !=(Vector v1, Vector v2)
        {
            return !(v1 == v2);
        }

        public static Vector operator +(Vector v1, Vector v2)
        {
            Vector v = new Vector(v1);
            v.X += v2.X;
            v.Y += v2.Y;

            return v;
        }

        public static Vector operator -(Vector v1, Vector v2)
        {
            Vector v = new Vector(v1);
            v.X -= v2.X;
            v.Y -= v2.Y;

            return v;
        }

        public static Vector operator *(Vector v1, double scalar)
        {
            Vector v = new Vector(v1);
            v.X *= scalar;
            v.Y *= scalar;

            return v;
        }

        public static Vector operator /(Vector v1, double scalar)
        {
            Vector v = new Vector(v1);
            v.X /= scalar;
            v.Y /= scalar;

            return v;
        }
    }
}
